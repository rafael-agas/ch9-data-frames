pizzafied <- food
return(pizzafied)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(my_breakfast)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals[[2]])
#
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "a", "g")
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("apple", "introdution", "gong", "conclusion", "hierarchy", "cars")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, " is the word of the day", sep = " ")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
for (i in 1:length(words)) {
if (substring(words[i],1,1) == "a" || substring(words[i],1,1) == "f") {
a_f_words <- words[i]
}
}
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
for (i in 1:length(words)) {
if (substring(words[i],1,1) == "g" || substring(words[i],1,1) == "m") {
g_m_words <- words[i]
}
}
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(vector, x, y) {  for (i in 1:length(words)) {
letter_vector <- seq(x:y)
#    if (substring(tolower(words[i]),1,1) == ) {
#      bin <- words[i]
#    }
# }
return(letter_vector)
}
#
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "a", "g")
clear
rm(list = ls())
rm(list = ls())
install.packages("tidyverse")
install.packages(lintr)
install.packages("styler")
install.packages("lintr")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
lint(exercise.R)
lintr:::addin_lint()
install.packages("lintr")
install.packages("lintr")
lintr::absolute_paths_linter("exercise.r")
lintr()
?lintr
lintr::absolute_paths_linter("Z:/info 201/ch7-vector/exercise-3/exercise.r")
lint("Z:/info 201/ch7-vectors/exercise-3/exercise.r")
lintr::lint("z:/info 201/ch7-vectors/exercise-3/exercise.r")
styler:::style_active_file()
styler:::style_active_file()
lintr::lint("z:/info 201/ch7-vectors/exercise-3/exercise.r")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
lint("z:/info 201/ch8-lists/exercise-1/exercise.r")
lintr::lint(z:/info 201/ch8-lists/exercise-1/exercise.r)
lintr::lint("z:/info 201/ch8-lists/exercise-1/exercise.r")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("nothing")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("dumplings", "chips", "mango juice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "fried steak", "pork belly")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_Meals <- list(meals[1:2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food[length(food) + 1] <- "pizza"
pizzafied <- food
return(pizzafied)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals[[2]])
View(meals)
View(meals)
View(early_Meals)
rm(list = ls())
setwd("Z:/info 201/ch9-data-frames/exercise-1")
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- as.data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
# Create a new column "won" which is TRUE if the Seahawks won the game
# Create a vector of the opponent names corresponding to the games played
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("nothing")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("dumplings", "chips", "mango juice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfsadt = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "fried steak", "pork belly")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_Meals <- list(meals[1:2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food[length(food) + 1] <- "pizza"
pizzafied <- food
return(pizzafied)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals[[2]])
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("nothing")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("dumplings", "chips", "mango juice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfsadt = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "fried steak", "pork belly")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- lunch_again = meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_Meals <- list(meals[1:2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food[length(food) + 1] <- "pizza"
pizzafied <- food
return(pizzafied)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals[[2]])
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("nothing")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("dumplings", "chips", "mango juice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfsadt = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "fried steak", "pork belly")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_Meals <- list(meals[1:2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food[length(food) + 1] <- "pizza"
pizzafied <- food
return(pizzafied)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals[[2]])
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food <- c(food, "pizza")
food
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <-lapply(meals, add_pizza)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("nothing")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("dumplings", "chips", "mango juice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfsadt = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "fried steak", "pork belly")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_Meals <- list(meals[1:2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
food <- c(food, "pizza")
food
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <-lapply(meals, add_pizza)
View(meals)
View(meals)
View(better_meals)
rm(list = ls())
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
# Create a new column "won" which is TRUE if the Seahawks won the game
# Create a vector of the opponent names corresponding to the games played
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- games$scores - games$opponentScores
games <- c(games, diff)
View(games)
View(games)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
games <- data.frame(scores, opponentScores, diff)
games <- data.frame(scores, opponentSCores, diff, won)
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- diff > 0
games <- data.frame(scores, opponentSCores, diff, won)
games <- data.frame(scores, opponentSCores, diff, won)
games <- data.frame(scores, opponentScores, diff, won)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
games <- cbind(games, diff)
View(games)
games <- cbind(games, won)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = rownames(opponent), games)
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = rownames(games), games)
games
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = opponent, games)
games
rownames(games)
rownames(games) <- NULL
games
rm(list = ls())
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- games$scores - games$opponentScores
games <- cbind(games, diff)
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- diff > 0
games <- cbind(games, won)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = opponent, games)
# View your data frame to see how it has changed!
games
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$opponentScores
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = opponent, games)
# View your data frame to see how it has changed!
games
rownames(games <- opponents
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$opponentScores
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
#games <- cbind(Row.names = opponent, games)
rownames(games <- opponents
# View your data frame to see how it has changed!
games
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$opponentScores
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
#games <- cbind(Row.names = opponent, games)
rownames(games <- opponent
# View your data frame to see how it has changed!
games
# Assign your dataframe rownames of their opponents
#games <- cbind(Row.names = opponent, games)
rownames(games) <- opponent
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$opponentScores
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
#games <- cbind(Row.names = opponent, games)
rownames(games) <- opponent
# View your data frame to see how it has changed!
games
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = opponent, games)
games
View(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(c(Employee), 1:100, sep = " ")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(c("Employee"), 1:100, sep = " ")
rm(list = ls()
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9,12,27,46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponentScores <- c(17,9,33,18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, opponentScores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$opponentScores
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent <- c("GB","SF","TN","ID")
# Assign your dataframe rownames of their opponents
games <- cbind(Row.names = opponent, games)
#rownames(games) <- opponent
# View your data frame to see how it has changed!
games
rm(list = ls())
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(c("Employee"), 1:100, sep = " ")
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, 40000,50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
2018_salary <- salary[salary - runif(100, -5000, 10000)]
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salary <- salary[salary - runif(100, -5000, 10000)]
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salary <- salary - runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, new_salary, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salary - salary
salaries$got_raise <- salaries$change > 0
salaries
