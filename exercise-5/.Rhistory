# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value <- value * 2
return(value)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
cube <- (number)^3
return(cube)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Lion King", "Kill Bill", "TItanic", "Jurassic Park", "Mulan", "The Blind Side")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!", sep = " ")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
non_digit <- trimws(gsub("[0-9]", "", string), which = "both")
return(non_digit)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
letter <- remove_digits(c("INFO 201", "CSE 142"))
capitalized
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".",sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = NULL))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), " In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday
my_bday_intro
styler:::style_active_file()
rm(list = ls())
setwd("Z:/info 201/ch9-data-frames/exercise-2")
employees <- paste(c("Employee"), 1:100, sep = " ")
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, 40000,50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salary <- salary - runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, new_salary, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salary - salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
employees
rm(list = ls())
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
USPersonalExpenditure$columns
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
US <- data.frame(USPersonalExpenditure)
View(US)
# What are the column names of your dataframe?
colnams(US)
# What are the column names of your dataframe?
colnames(US)
# What are the row names of your dataframe?
rownames(US)
# Add a column "category" to your data frame that contains the rownames
US$category <- rownames(US)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
US <- data.frame(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
US$category <- rownames(US)
# How much money was spent on Food and Tobacco in 1960?
US$category(1)
# How much money was spent on Food and Tobacco in 1960?
US$X1960
# How much money was spent on personal care in 1940?
US(category, X1940)
# How much money was spent on personal care in 1940?
US$(category, X1940)
# How much money was spent on personal care in 1940?
care_1940 <- US["1940", 'Personal Care']
# How much money was spent on personal care in 1940?
care_1940 <- US["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
Food <- US["Food and Tobacco", "1960"]
# How much money was spent on Food and Tobacco in 1960?
Food <- US["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max_spend <- max(US[, "1960"])
# What was the highest expenditure category in 1960?
max_spend <- max(US[,"1960"])
# What was the highest expenditure category in 1960?
max_spend <- max(US["1960"])
# What was the highest expenditure category in 1960?
max_spend <- max(US$X1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
return(min(US$year))
}
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
US$category[US[, col] == min(US[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
US$category[US[,col]]
US$category[US[,"X1940"]]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
# What was the highest expenditure category in 1960?
max_spend <- US$category[US$X1960 == max(US$X1960)
# What was the highest expenditure category in 1960?
max_spend <- US$category[US$X1960 == max(US$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
US$category[US[, col] == min(US[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
# What was the highest expenditure category in 1960?
max_spend <- US$category[US$X1960 == max(US$X1960)]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
rm(list = ls())
setwd("Z:/info 201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
view(grants)
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants$organization(,max(grants$total_amount))
# How many grants were awarded in 2010?
max(grants$id)
# Which organization received the largest grant?
org_high <- organization[grants$total_amount == highest]
# What was the dollar amount of the largest grant?
highest= max(grants$total_amount)
# What was the dollar amount of the smallest grant?
lowest = min(grants$total_amount)
# Which organization received the largest grant?
org_high <- organization[grants$total_amount == highest]
# Which organization received the smallest grant?
low_org <- organization[grants$total_amount == lowest]
# How many grants were awarded in 2010?
max(grants$id)
length(organization)
# How many grants were awarded in 2010?
X2010 <- grants$start_year == 2010
length(X2010)
# How many grants were awarded in 2010?
X2010 <- grants$start_end == 2010
length(X2010)
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year] == 2010)
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year] == 2010)
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
year_start <- grants$start_year == 2010
# How many grants were awarded in 2010?
year_length <- grants$total_amount[grants$start_year == 2010])
# How many grants were awarded in 2010?
year_length <- grants$total_amount[grants$start_year == 2010]
length(year_length)
rm(list = ls())
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("female_names.csv", stringsAsFactors = FALSE)
setwd("Z:/info 201/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("female_names.csv", stringsAsFactors = FALSE)
setwd("Z:/info 201/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("female_names.csv", stringsAsFactors = FALSE)
pwd
pwd()
getwd()
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
names
View(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names$year == 2013
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names$name[names$year == 2013]
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013]
# What was the most popular female name in 2013?
pop_name <- names_2013[names$prop == max(names$prop), "name"]
# What was the most popular female name in 2013?
pop_name <- names_2013[names$prop == max(names_2013$prop), "name"]
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
# What was the most popular female name in 2013?
pop_name <- names_2013[names$prop == max(names_2013$prop), "name"]
# What was the most popular female name in 2013?
pop_name <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
popular <- names[names$year == year,]
popular_name <- popular[popular$prop == max(popular$prop), "name"]
popular_name
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
styler:::style_active_file()
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
percentage <- names[names$year == year && names$name == name, "prop"]
return(percentage * 1000000)
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
# What was the most popular female name in 2013?
pop_name <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
popular <- names[names$year == year,]
popular_name <- popular[popular$prop == max(popular$prop), "name"]
popular_name
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
percentage <- names[names$year == year && names$name == name, "prop"]
return(percentage * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
## Consider: what does this tell you about how easy it is to identify you with
## just your name and birth year?
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
percentage <- names[names$year == year && names$name == name, "prop"]
return(percentage * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
percentage <- names[names$year == year && names$name == name, "prop"]
percentage * 1000000
}
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
percentage <- names[names$year == year && names$name == name, "prop"]
percentage * 1000000
}
